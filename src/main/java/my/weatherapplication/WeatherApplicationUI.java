/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.weatherapplication;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpHeaders;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandler;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Jayden Kruger
 */
public class WeatherApplicationUI extends javax.swing.JFrame {

    /**
     * Creates new form WeatherApplicationUI
     */
    public WeatherApplicationUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        locationTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        locationBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        WeatherTextArea = new javax.swing.JTextArea();
        foundLocationTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Weather"));

        jLabel1.setText("Enter location name:");

        locationBtn.setText("Search location weather");
        locationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(locationTxt))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(110, 110, 110)
                                .addComponent(locationBtn)))
                        .addGap(0, 115, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(locationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(locationBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Location Weather"));

        WeatherTextArea.setColumns(20);
        WeatherTextArea.setRows(5);
        jScrollPane1.setViewportView(WeatherTextArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(foundLocationTxt))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(foundLocationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void locationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationBtnActionPerformed
        //create and send command to API and update textfields.
        if ("".equals(locationTxt.getText())) {
            //user hasn't entered location data.
            return;
        }
        else {
            String [] coOrds = new String [2];
            String location = locationTxt.getText();
            if (location.indexOf(" ") != -1)
                location = location.replaceAll(" ", "-");
            var client = HttpClient.newHttpClient();
            var request =  HttpRequest.newBuilder(URI.create(
                    "http://api.openweathermap.org/geo/1.0/direct?q=" + location + 
                            "&limit=1&appid=bfc8622f55fa2800fd3fae085967a2cd"))
                    .header("accept", "application/json")
                    .build();
            
            try {
                HttpResponse<InputStream> response = client.send(request, HttpResponse.BodyHandlers.ofInputStream());
                //TODO throw error and report to user if status code isn't 200
                HttpHeaders hdrs = response.headers();
                Map<String, List<String>> hdrMap = hdrs.map();
                Set<String> hdrField = hdrMap.keySet();
                
                InputStream input = response.body();
                int c;
                String buffer = "";
                while ((c = input.read()) != -1) {
                    buffer += (char) c;
                }
                foundLocationTxt.setText(getGeoName(buffer));
                
                coOrds = getLatLong(buffer);
                
            } catch (Exception e) {
                foundLocationTxt.setText("An error occured.");
            } 
            
            try {
                client = HttpClient.newHttpClient();
                request = HttpRequest.newBuilder(URI.create(
                "https://api.openweathermap.org/data/2.5/weather?lat=" + coOrds[0] +
                    "&lon=" + coOrds[1] +
                    "&appid=bfc8622f55fa2800fd3fae085967a2cd&units=metric"))
                    .header("accept", "application/json")
                    .build();
                
                HttpResponse<InputStream> response = client.send(request, HttpResponse.BodyHandlers.ofInputStream());
                HttpHeaders hdrs = response.headers();
                Map<String, List<String>> hdrMap = hdrs.map();
                Set<String> hdrField = hdrMap.keySet();
                
                InputStream input = response.body();
                int c;
                String buffer = "";
                while ((c = input.read()) != -1) {
                    buffer += (char) c;
                }
                String [] weatherDetails = getMainWeatherDesc(buffer);
                String [] weatherTemp = getTemps(buffer);
                String weatherDetail = String.format(
                        "Main: %1$s\nDetails: %2$s\nCurrent temp: %3$sºC\nFeels like: %4$sºC\nMin Temp: %5$sºC\nMax Temp: %6$sºC", 
                        weatherDetails[0], weatherDetails[1], weatherTemp[0], weatherTemp[1], weatherTemp[2], weatherTemp[3]);
                WeatherTextArea.setText(weatherDetail);
                
            } catch (Exception e) {
                
            }
        }
    }//GEN-LAST:event_locationBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WeatherApplicationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WeatherApplicationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WeatherApplicationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WeatherApplicationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WeatherApplicationUI().setVisible(true);
            }
        });
    }
    
    private String getGeoName(String streamIn) {
        int c;
        int r;
        r = streamIn.indexOf("\"name\":");
        c = streamIn.indexOf(",");
        
        if (r == -1 & c == -1)
            return null;
        String geoName = streamIn.substring(r + 8, (c - 1));
        return geoName;
    }
    
    private String[] getLatLong (String streamIn) {
        int b, e; //b = beginning, e = ending
        String[] coOrds = new String[2];
        
        //finding lat.
        b = streamIn.indexOf("\"lat\":");
        if (b == -1)
            return coOrds;
        //find ending of lat using b
        e = streamIn.indexOf(",", b);
        if (e == -1)
            return coOrds;
        coOrds[0] = streamIn.substring(b + 6, (e - 1));
        
        //finding long
        b = streamIn.indexOf("\"lon\":");
        if (b == -1)
            return coOrds;
        e = streamIn.indexOf(",", b);
        if (e == -1)
            return coOrds;
        coOrds[1] = streamIn.substring(b + 6, (e - 1));
        return coOrds;
    }
    
    private String[] getMainWeatherDesc (String streamIn) {
        int b, e; //similar to previous parsing methods
        String[] weather = new String[2];
        
        //get main description
        b = streamIn.indexOf("\"main\":");
        if (b == -1)
            return weather;
        //find ending of main using b
        e = streamIn.indexOf(",", b);
        if (e == -1)
            return weather;
        weather[0] = streamIn.substring(b + 8, (e - 1));
        
        //get description details
        b = streamIn.indexOf("\"description\":");
        if (b == -1)
            return weather;
        //find ending of description using b
        e = streamIn.indexOf(",", b);
        if (e == -1)
            return weather;
        weather[1] = streamIn.substring(b + 15, (e - 1));
        return weather;
    }
    
    private String[] getTemps (String streamIn) {
        int b, e; //similar to previous parsing methods
        String[] weather = new String[4];
        
        //get main description
        b = streamIn.indexOf("\"temp\":");
        if (b == -1)
            return weather;
        //find ending of main using b
        e = streamIn.indexOf(",", b);
        if (e == -1)
            return weather;
        weather[0] = streamIn.substring(b + 7, e);
        
        b = streamIn.indexOf("\"feels_like\":");
        if (b == -1)
            return weather;
        //find ending of main using b
        e = streamIn.indexOf(",", b);
        if (e == -1)
            return weather;
        weather[1] = streamIn.substring(b + 13, e);
        
        b = streamIn.indexOf("\"temp_min\":");
        if (b == -1)
            return weather;
        //find ending of main using b
        e = streamIn.indexOf(",", b);
        if (e == -1)
            return weather;
        weather[2] = streamIn.substring(b + 11, e);
        
        b = streamIn.indexOf("\"temp_max\":");
        if (b == -1)
            return weather;
        //find ending of main using b
        e = streamIn.indexOf(",", b);
        if (e == -1)
            return weather;
        weather[3] = streamIn.substring(b + 11, e);
        
        return weather;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea WeatherTextArea;
    private javax.swing.JTextField foundLocationTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton locationBtn;
    private javax.swing.JTextField locationTxt;
    // End of variables declaration//GEN-END:variables
}
